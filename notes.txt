#################
Module I - Overview
#################

Lambda Expressions introduction
Lambda Syntax
Functional Interfaces
Method References
Constructor References
How to process data from Collection API?


What is a lambda expression for?
To make instances of anonymous classes easier to write and read

What is a Java 8 Lambda Expression?
Another way of writing instances of anonymous classes


--------------------------------------------------------------------
Several ways of writing a Lambda Expression

The simplest way and more than one argument:
FileFilter filter = (File file) -> file.getName().endsWith(".java");

If I have more than one line of code
Runnable r = () -> {
	for (int i=0; i < 5; i++) {
		System.out.println("Hello World!");
	}
};

--------------------------------------------------------------------
What is the type of lambda expression?
Answer: A functional interface - is an interface with only one abstract method.
Example: Runnable, Comparator, FileFilter
A functional interface can be annotated
@FunctionalInterface
public interface MyFunctionalInterface {
	someMethod();

	equals(Object o);

};
This annotation is totally optional, since compiler can tell it or identify it.

--------------------------------------------------------------------
Can a lambda be put in a variable?
Answer: Yes, This is what we have been doing in the examples so far
A lambda can be taken as a method parameter, and can be returned by a method

--------------------------------------------------------------------
Is a lambda expression an Object?
Answer: No, is still an Object without an identity
A lambda expression is created without using <<new>>




Package java.util.function
4 categories:

Supplier:

@FunctionalInterface 
public interface Supplier<T> {
	T get();
}

SECOND
Consumer/BiConsumer:

@FunctionalInterface
public interface Consumer<T> {
	void accept(T t);
}

@FunctionalInterface
public interface Consumer<T, U> {
	void accept(T t, U u);
}

THIRD
Predicate/BiPredicate:

@FunctionalInterface
public interface Predicate<T> {
	boolean test(T t);
}

@FunctionalInterface
public interface Predicate<T, U> {
	boolean test(T t, U u);
}

Function:

@FunctionalInterface
public interface Function<T, R> {
	R apply(T t);
}

@FunctionalInterface
public interface Function<T, U, R> {
	R apply(T t, U u);
}

@FunctionalInterface
public interface UnaryOperator<T> extends Function<T, T> {
}

@FunctionalInterface
public interface BinaryOperator<T> extends Function<T, T, T> {
}

